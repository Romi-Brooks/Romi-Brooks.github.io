<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Arch Linux 下 Nvidia 显卡驱动的安装</title>
    <url>/2025/08/12/Arch%20Linux%20%E4%B8%8B%20Nvidia%20%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8%E7%9A%84%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Archlinux</tag>
        <tag>Nvidia</tag>
        <tag>Installation</tag>
      </tags>
  </entry>
  <entry>
    <title>Navidrome，定义你自己离线的播放器</title>
    <url>/2023/03/04/Navidrome%EF%BC%8C%E5%AE%9A%E4%B9%89%E4%BD%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E7%A6%BB%E7%BA%BF%E6%92%AD%E6%94%BE%E5%99%A8/</url>
    <content><![CDATA[<p><img src="/../../../img/Navidrome-U-Own-Music-Player/cover.png" alt="封面" title="Cover"></p>
<p>最近在上传我的本地歌曲库的时候,发现过于麻烦,(筛选,打包,上传.如果我需要修改某个文件的时候还需要再下载回来,然后解压,再修改.重复这个步骤)于是想到了托管到VPS,并且实现流媒体播放.那么这还是蛮不错的!  </p>
<blockquote>
<p>PS:这个很早就打算做了,只不过懒,就一直拖下去了(因为早期下载歌曲的时候过于偷懒导致过50%的歌曲的metadata都出现了不匹配的问题…..)  </p>
</blockquote>
<span id="more"></span>  
<p><strong>同样,这个东西也适用于内网用户(如NAS用户)访问自己的媒体文件,其实这类软件目标人群应该就是这个.</strong>  </p>
<h1 id="寻找一个适合的软件"><a href="#寻找一个适合的软件" class="headerlink" title="寻找一个适合的软件"></a>寻找一个适合的软件</h1><p>我的基本要求是,颜值首先!如果不好看,我估计我会第一个舍弃…..<br>其次必须支持<code>流式媒体播放</code>,这一次托管的目的就在这里!<br>然后是功能必须齐全:比如<code>歌手排序</code>,<code>歌单排序</code>,<code>用户喜爱</code>,<code>封面展示</code>…..<br>最后是方便部署,如果部署起来特别麻烦,那是真的得不偿失…..<br>我大概花费了几个小时尝试,而后偶然发现了<code>Navidrome</code>,也就是这篇文章的主角.  </p>
<h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p><code>Navidrome</code> 的部署分为三步,我觉得简单到天际…..  </p>
<ul>
<li>下载,解压</li>
<li>配置歌曲文件夹</li>
<li>运行</li>
</ul>
<p>Step 1. 下载只需要到<a href="https://github.com/navidrome/navidrome">Navidrome</a>的<a href="https://github.com/navidrome/navidrome/releases">releases</a>里下符合你系统架构的二进制文件. ez to do it.<br>然后解压,一般直接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -xvf filename.tar.gz</span><br></pre></td></tr></table></figure>
<p>Step 2. 在你程序目录新建一个<code>music</code>文件夹,可以直接放音乐,也可以软连接到你自己的音乐文件夹.只要有音乐就行!<br>Step 3. 启动,这里推荐用<code>screen</code>或者是你喜欢的什么软件来防止被ban.到这里<code>Navidrome</code>就部署完成了.简单的一b</p>
<p>后续的设置基本就是<code>Nginx 反向代理</code>,让他更加简洁美观 (同时加锁,即取得https)</p>
<p>参考上一篇博客,在<code>player.ssl.conf</code>里写入以下内容(根据自己的改):</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">    <span class="attribute">listen</span>  <span class="number">443</span> ssl;</span><br><span class="line">    <span class="attribute">ssl_certificate</span> /etc/letsencrypt/live/player.romichan.me/fullchain.pem;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> /etc/letsencrypt/live/player.romichan.me/privkey.pem;</span><br><span class="line">    <span class="attribute">server_name</span>  player.romichan.me;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span>  http://127.0.0.1:4533; <span class="comment"># 这里就是转发的地址了</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$proxy_host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在<code>player.conf</code>里写入:</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>  <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  player.romichan.me;</span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^(.*)$</span>  https://<span class="variable">$host</span><span class="variable">$1</span> <span class="literal">permanent</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>到这里,我认为全部就部署好了<br>这时候使用<code>player.romichan.me</code>进入你的<code>Navidrome</code>,初次使用会让你设置管理员用户和密码,记好就行了.  </p>
<p>还有什么要说的呢?<br>哦,对….<br>你在使用这些离线音乐库的时候就要注意,你本地音乐的metadata一定不要有太多的问题,不然整个页面看起来都会很乱<br>我为什么会在文章开头我懒得去弄呢?就是因为我后续整理metadata用了将近三个小时….这真的很折磨…<br><img src="/../../../img/Navidrome-U-Own-Music-Player/1.0.1.jpg" alt="折磨" title="折磨">  </p>
<p><del>当然如果你的习惯很好,那么这个当然对你来说没有任何问题,加油!</del></p>
<h2 id="在最后的最后，感恩。"><a href="#在最后的最后，感恩。" class="headerlink" title="在最后的最后，感恩。"></a><center>在最后的最后，感恩。</center></h2>   <p align="right">Romi Brooks♥</p>]]></content>
      <categories>
        <category>Music</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
        <tag>Music</tag>
        <tag>Website</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx二级域名配置</title>
    <url>/2023/02/25/Nginx%E4%BA%8C%E7%BA%A7%E5%9F%9F%E5%90%8D%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<center>  

<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=2020918656&auto=0&height=66"></iframe>  

<p><del>YOASOBI 在 2月15号出新专辑了捏</del>  </p>
</center>  

<blockquote>
<p>在去年Digital Ocean把我的账号突然封禁之后,我甚至没有办法迁移我的数据,所有配置文件只能重写<br>这里是为了留一份Nginx中二级域名.conf配置文件的写法,依据我的习惯,仅供参考 </p>
</blockquote>
<p>Nginx现在的版本应该会在<code>/etc/nginx/</code>目录存在<code>nginx.conf</code><br>这里大概是这样  </p>
<span id="more"></span>  

<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attribute">user</span>  nginx;</span><br><span class="line"><span class="attribute">worker_processes</span>  auto;</span><br><span class="line"></span><br><span class="line"><span class="attribute">error_log</span>  /var/log/nginx/<span class="literal">error</span>.log <span class="literal">notice</span>;</span><br><span class="line"><span class="attribute">pid</span>        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>       /etc/nginx/mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">log_format</span>  main  <span class="string">&#x27;<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] &quot;<span class="variable">$request</span>&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> &quot;<span class="variable">$http_referer</span>&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;&quot;<span class="variable">$http_user_agent</span>&quot; &quot;<span class="variable">$http_x_forwarded_for</span>&quot;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">access_log</span>  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">include</span> /etc/nginx/conf.d/<span class="regexp">*.conf</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可见,<code>nginx.conf</code>引用了<code>/etc/nginx/conf.d/</code>下的所有.conf文件<br>这里我习惯把我的个人网站配置文件放在这  </p>
<h1 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h1><p>现在假设我想要创建一个名为<code>blog.romichan.me</code>的网站,用来存放我的博客<br>首先在你域名的托管商配置<code>DNS解析</code>,可以是A解析,也可以是AAAA解析,需要绑定到服务器上<br>接着在<code>/etc/nginx/conf.d/</code>下新建一个名为<code>blog.ssl.conf</code>的文件,他一般是这样的:  </p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>  <span class="number">443</span> ssl;    <span class="comment"># 自从新版本nginx开始,启用ssl隧道得这么写</span></span><br><span class="line">    <span class="attribute">ssl_certificate</span> /etc/letsencrypt/live/blog.romichan.me/fullchain.pem;   <span class="comment"># 证书文件</span></span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> /etc/letsencrypt/live/blog.romichan.me/privkey.pem; <span class="comment"># 证书密钥文件</span></span><br><span class="line">    <span class="attribute">server_name</span>  blog.romichan.me;  <span class="comment">#这里就是要解析到的域名,也就是你在域名托管商的DNS解析里所设置的</span></span><br><span class="line">        <span class="section">location</span> / &#123;</span><br><span class="line">            <span class="attribute">root</span>         /usr/share/webpage/blog; <span class="comment">#这里是博客的根目录.据你的需求,我只需要index.html所以下面的index只写了这些</span></span><br><span class="line">            <span class="attribute">index</span>        index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>而后我们在新建一个文件,它的名字是<code>blog.conf</code>,写入这些:  </p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>  <span class="number">80</span>; <span class="comment"># 不作解释,8080也行</span></span><br><span class="line">    <span class="attribute">server_name</span>  blog.romichan.me; <span class="comment"># 解析到的网站</span></span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^(.*)$</span>  https://<span class="variable">$host</span><span class="variable">$1</span> <span class="literal">permanent</span>; <span class="comment"># 重点,这里是把网页强行重定向到https,这样我们上面的证书才可以起到效果!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>总体就这么多,如果你需要通过二级域名来转发你服务器某个端口的数据 (应该是叫<code>反向代理</code>) ,也是这么写,不过需要修改<code>blog.ssl.conf</code>的一些地方:  </p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">    <span class="attribute">listen</span>  <span class="number">443</span> ssl;</span><br><span class="line">    <span class="attribute">ssl_certificate</span> /etc/letsencrypt/live/blog.romichan.me/fullchain.pem;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> /etc/letsencrypt/live/blog.romichan.me/privkey.pem;</span><br><span class="line">    <span class="attribute">server_name</span>  blog.romichan.me;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span>  http://127.0.0.1:8080; <span class="comment"># 这里就是转发的地址了</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$proxy_host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="That’s-all"><a href="#That’s-all" class="headerlink" title="That’s all"></a>That’s all</h1><p>这就是一个随笔  </p>
<p>我当时在搜集这些资料的时候被很多的名字都吓到了,但其实这是一个很简单的东西,完全是一个模板化的东西,只需要记下来,以后应该都是适用的  </p>
<p>大概就这么多,如果你看到了,希望对你有帮助.  </p>
<h2 id="在最后的最后，感恩。"><a href="#在最后的最后，感恩。" class="headerlink" title="在最后的最后，感恩。"></a><center>在最后的最后，感恩。</center></h2>   <p align="right">Romi Brooks♥</p>]]></content>
      <categories>
        <category>WebDev</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
        <tag>Website</tag>
        <tag>WebDev</tag>
      </tags>
  </entry>
  <entry>
    <title>变更记录</title>
    <url>/2000/01/01/%E5%8F%98%E6%9B%B4%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="2022"><a href="#2022" class="headerlink" title="2022"></a>2022</h1><h2 id="2022-10-6："><a href="#2022-10-6：" class="headerlink" title="2022-10-6："></a>2022-10-6：</h2><ul>
<li>将Github Page上托管的Blog仓库迁移至主服务器<h2 id="2022-6-23："><a href="#2022-6-23：" class="headerlink" title="2022-6-23："></a>2022-6-23：</h2></li>
<li>将Blog从旧域名迁移至新域名<h2 id="2022-6-17："><a href="#2022-6-17：" class="headerlink" title="2022-6-17："></a>2022-6-17：</h2></li>
<li>上传Blog仓库到Github，并且托管至Github Page</li>
</ul>
]]></content>
      <tags>
        <tag>SysRecord</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello Hexo</title>
    <url>/2022/04/17/hello-world/</url>
    <content><![CDATA[<h2 id="Welcome-to-My-Bolg-I’m-Romi-Brooks"><a href="#Welcome-to-My-Bolg-I’m-Romi-Brooks" class="headerlink" title="Welcome to My Bolg! I’m Romi Brooks."></a>Welcome to <a href="https://blog.romichan.me/">My Bolg</a>! I’m <a href="https://home.romichan.me/">Romi Brooks</a>.</h2><audio id="audio" controls="" preload="none">
    <source id="mp3" src="../../../../music/CE.mp3">
</audio>

<p><em>What do you want to be, It’s what do you do, Not what you think.</em> </p>
<blockquote>
<p>Blog owner: <a href="home.romichan.me">Romi Brooks</a><br>Ellis (Music Producer): <a href="http://music.163.com/artist?id=32932&userid=13691861">Ellis</a><br>Music: <a href="https://y.music.163.com/m/song?id=1383943958">Colours (Extended Mix)</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>Nginx中code-server的ws配置</title>
    <url>/2023/04/01/Nginx%E4%B8%ADcode-server%E7%9A%84ws%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p><img src="/../../../img/Nginx%E4%B8%ADcode-server%E7%9A%84ws%E9%85%8D%E7%BD%AE/Cover.png" alt="封面" title="Cover"></p>
<blockquote>
<p>这个问题已经有很多人出现了,github也有人提出了issues<br><a href="https://github.com/coder/code-server/issues/4443">https://github.com/coder/code-server/issues/4443</a>  </p>
</blockquote>
<span id="more"></span>
<blockquote>
<p>可以看到导致这个问题的原因是由于<code>Nginx</code>反向代理并没有接受ws握手导致的<br>这里也有很多人给出了答案,但是为了方便我之后部署,我还是决定把它写下来  </p>
</blockquote>
<p>废话不多说,直接上<code>.conf</code>文件:</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">    <span class="comment">#其他选项</span></span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span>  http://127.0.0.1:7654;  <span class="comment">#转发地址</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#下面这些就是相关的ws转发,把这些写上了code-server才能正常工作</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span> HOST <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Connection upgrade;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Accept-Encoding gzip;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$proxy_host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>同样,这也是一篇随笔…  </p>
<p><del>ps:在想一个好玩的东西</del></p>
<h2 id="在最后的最后，感恩。"><a href="#在最后的最后，感恩。" class="headerlink" title="在最后的最后，感恩。"></a><center>在最后的最后，感恩。</center></h2>   <p align="right">Romi Brooks♥</p>
]]></content>
      <categories>
        <category>WebDev</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
        <tag>Website</tag>
        <tag>WebDev</tag>
        <tag>code-server</tag>
      </tags>
  </entry>
  <entry>
    <title>学习人生之C++进阶</title>
    <url>/2025/07/01/%E5%AD%A6%E4%B9%A0%E4%BA%BA%E7%94%9F%E4%B9%8BC++%E8%BF%9B%E9%98%B6/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Language</category>
        <category>C++</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>Development</tag>
        <tag>C++ Lang</tag>
      </tags>
  </entry>
  <entry>
    <title>Archlinux + U盘 打造随身系统盘</title>
    <url>/2023/01/09/Archlinux%20+%20U%E7%9B%98%20%E6%89%93%E9%80%A0%E9%9A%8F%E8%BA%AB%E7%B3%BB%E7%BB%9F%E7%9B%98/</url>
    <content><![CDATA[<p><img src="/../../../img/Archlinux-U%E7%9B%98-%E6%89%93%E9%80%A0%E9%9A%8F%E8%BA%AB%E7%B3%BB%E7%BB%9F%E7%9B%98/Cover.jpg" alt="封面" title="Cover"></p>
<h1 id="最后一次编辑时间-2023-01-17-17-53"><a href="#最后一次编辑时间-2023-01-17-17-53" class="headerlink" title="最后一次编辑时间: 2023-01-17 17:53"></a>最后一次编辑时间: 2023-01-17 17:53</h1><ul>
<li>上一次编辑时间：2023-01-15 16:53</li>
<li>上一次编辑时间：2023-01-10 0:51</li>
</ul>
<center>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1393318072&auto=0&height=66"></iframe>


<p><em>Music：<a href="https://music.163.com/#/song?id=1393318072&userid=1369186144">Fractal</a> by <a href="https://music.163.com/#/artist?id=742233">Tinlicker</a></em>  </p>
</center>  


<blockquote>
<p>参考文献<br>1.一个完整的Arch Linux 安装流程：<a href="https://zhuanlan.zhihu.com/p/513859236">2022.5 archlinux详细安装过程</a><br>2.在可移动介质上安装Arch Linux：<a href="https://wiki.archlinux.org/title/Install_Arch_Linux_on_a_removable_medium">Install Arch Linux on a removable medium</a><br>3.i3wm配置：<a href="https://blog.csdn.net/r8l8q8/article/details/103889972">ArchLinux下i3wm简单配置和美化</a><br>4.i3wm配置：<a href="https://segmentfault.com/a/1190000022083424">一份自用的简单i3wm配置</a>  </p>
</blockquote>
<p>你的U盘通常要在32G以此来使用较好的图形化功能。<br>本文是一个自用的Arch Linux安装方法，针对的是我自己，如果你看到这个文章了，里头可能有一些东西你是可以用到的。这篇文章旨在帮助不会安装Arch Linux的用户，以及当我自己遗忘某些安装细节时可以回过头来查看。  </p>
<span id="more"></span>
<p><del>Start</del></p>
<h1 id="安装Arch-Linux"><a href="#安装Arch-Linux" class="headerlink" title="安装Arch Linux"></a>安装Arch Linux</h1><h2 id="引导，分区，调整，安装："><a href="#引导，分区，调整，安装：" class="headerlink" title="引导，分区，调整，安装："></a>引导，分区，调整，安装：</h2><p><img src="/../../../img/Archlinux-U%E7%9B%98-%E6%89%93%E9%80%A0%E9%9A%8F%E8%BA%AB%E7%B3%BB%E7%BB%9F%E7%9B%98/1.1.1.png" alt="1.1.1" title="1.1.1">  </p>
<h3 id="确保使用UEFI引导："><a href="#确保使用UEFI引导：" class="headerlink" title="确保使用UEFI引导："></a>确保使用UEFI引导：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> /sys/firmware/efi/efivars</span><br></pre></td></tr></table></figure>
<p><img src="/../../../img/Archlinux-U%E7%9B%98-%E6%89%93%E9%80%A0%E9%9A%8F%E8%BA%AB%E7%B3%BB%E7%BB%9F%E7%9B%98/1.1.2.png" alt="1.1.2" title="1.1.2">  </p>
<p>输入这一行代码后，如果反馈目录不存在，不要继续，因为没有UEFI启动在后面写入引导的时候几乎绝对报错。如果有输出，说明电脑是以UEFI启动的。  </p>
<blockquote>
<p>Tips: 写入image用<code>Rufus</code>，这就是使用U盘安装。如果是没有多出来的U盘，则可以用虚拟机环境。</p>
</blockquote>
<h3 id="联网："><a href="#联网：" class="headerlink" title="联网："></a>联网：</h3><p>1.输入“iwctl”进入iwd模式，也就是终端最前方有“[iwd]#”字样。<br>2.在iwd模式下输入“device list”，查询电脑的网卡。记住你的网卡号，一般是wlan0或者wlan1（本文以多数情况wlan0为例）<br>3.在iwd模式下输入“station wlan0 scan”，然后再输入“station wlan0 get-networks”，显示周围的wifi的ssid扫描结果。<br>4.在iwd模式下输入“station wlan0 connect <ssid>”，如果是加密的wifi，系统会提示输入wifi密码，如无意外，就连上网了。<br>5.验证联网。按ctrl+c退出iwd模式，回到[root@archiso~]模式，输入“ping baidu.com”，如果有返回数据，说明已经连上网了。  </p>
<blockquote>
<p>一般来说，如果是网线直连，那么系统会自动连接网络，而不用使用iwd连接wifi。</p>
</blockquote>
<h3 id="更新时间："><a href="#更新时间：" class="headerlink" title="更新时间："></a>更新时间：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">timedatectl set-ntp <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="分区："><a href="#分区：" class="headerlink" title="分区："></a>分区：</h3><blockquote>
<p>涉及数据相关，请认真对待！</p>
</blockquote>
<h4 id="这里列出的是当前所有硬盘，找到你的硬盘，我这里是-x2F-dev-x2F-sda"><a href="#这里列出的是当前所有硬盘，找到你的硬盘，我这里是-x2F-dev-x2F-sda" class="headerlink" title="这里列出的是当前所有硬盘，找到你的硬盘，我这里是&#x2F;dev&#x2F;sda"></a>这里列出的是当前所有硬盘，找到你的硬盘，我这里是&#x2F;dev&#x2F;sda</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsblk</span><br></pre></td></tr></table></figure>
<p><img src="/../../../img/Archlinux-U%E7%9B%98-%E6%89%93%E9%80%A0%E9%9A%8F%E8%BA%AB%E7%B3%BB%E7%BB%9F%E7%9B%98/1.1.3.png" alt="1.1.3" title="1.1.3">  </p>
<h4 id="进-x2F-dev-x2F-sda分盘"><a href="#进-x2F-dev-x2F-sda分盘" class="headerlink" title="进&#x2F;dev&#x2F;sda分盘"></a>进&#x2F;dev&#x2F;sda分盘</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cfdisk /dev/sda</span><br></pre></td></tr></table></figure>
<p><img src="/../../../img/Archlinux-U%E7%9B%98-%E6%89%93%E9%80%A0%E9%9A%8F%E8%BA%AB%E7%B3%BB%E7%BB%9F%E7%9B%98/1.1.4.png" alt="1.1.4" title="1.1.4">  </p>
<h4 id="gpt分区表，回车就行"><a href="#gpt分区表，回车就行" class="headerlink" title="gpt分区表，回车就行"></a>gpt分区表，回车就行</h4><p><img src="/../../../img/Archlinux-U%E7%9B%98-%E6%89%93%E9%80%A0%E9%9A%8F%E8%BA%AB%E7%B3%BB%E7%BB%9F%E7%9B%98/1.1.5.png" alt="1.1.5" title="1.1.5">  </p>
<h4 id="用New新建分区，大小自定义，按照你自己来"><a href="#用New新建分区，大小自定义，按照你自己来" class="headerlink" title="用New新建分区，大小自定义，按照你自己来"></a>用New新建分区，大小自定义，按照你自己来</h4><blockquote>
<p>sda1 -&gt; 1G boot分区<br>sda2 -&gt; 2G swap分区  （不要swap你就不分，我使用下来是没有问题的）<br>sda3 -&gt; 37G &#x2F;分区<br>sda4 -&gt; 20G &#x2F;home分区  </p>
</blockquote>
<h4 id="用Write，然后输入yes写入分区"><a href="#用Write，然后输入yes写入分区" class="headerlink" title="用Write，然后输入yes写入分区"></a>用Write，然后输入yes写入分区</h4><p><img src="/../../../img/Archlinux-U%E7%9B%98-%E6%89%93%E9%80%A0%E9%9A%8F%E8%BA%AB%E7%B3%BB%E7%BB%9F%E7%9B%98/1.1.6.png" alt="1.1.6" title="1.1.6">  </p>
<h4 id="用Quit退出，然后lsblk看分的是否正确"><a href="#用Quit退出，然后lsblk看分的是否正确" class="headerlink" title="用Quit退出，然后lsblk看分的是否正确"></a>用Quit退出，然后lsblk看分的是否正确</h4><p><img src="/../../../img/Archlinux-U%E7%9B%98-%E6%89%93%E9%80%A0%E9%9A%8F%E8%BA%AB%E7%B3%BB%E7%BB%9F%E7%9B%98/1.1.7.png" alt="1.1.7" title="1.1.7">  </p>
<h4 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkfs.fat -F32 /dev/sda1</span><br><span class="line">mkfs.ext4 /dev/sda3</span><br><span class="line">mkfs.xfs /dev/sda4</span><br><span class="line">mkswap /dev/sda2</span><br><span class="line">swapon /dev/sda2</span><br></pre></td></tr></table></figure>

<h4 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mount /dev/sda3 /mnt</span><br><span class="line"><span class="built_in">mkdir</span> -p /mnt/boot/efi</span><br><span class="line">mount /dev/sda1 /mnt/boot/efi</span><br><span class="line"><span class="built_in">mkdir</span> /mnt/home</span><br><span class="line">mount /dev/sda4 /mnt/home</span><br></pre></td></tr></table></figure>
<blockquote>
<p>确保分区挂载正确，这里的参考应该是上文你所创建的分区！</p>
</blockquote>
<h4 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h4><p><img src="/../../../img/Archlinux-U%E7%9B%98-%E6%89%93%E9%80%A0%E9%9A%8F%E8%BA%AB%E7%B3%BB%E7%BB%9F%E7%9B%98/1.1.8.png" alt="1.1.8" title="1.1.8">  </p>
<h3 id="配置pacman"><a href="#配置pacman" class="headerlink" title="配置pacman"></a>配置pacman</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/pacman.d/mirrors</span><br></pre></td></tr></table></figure>
<blockquote>
<p>无论这个页面的内容是什么，只需要无脑修改第一条为  </p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Server = https://mirrors.bfsu.edu.cn/archlinux/<span class="variable">$repo</span>/os/<span class="variable">$arch</span>  </span><br></pre></td></tr></table></figure>

<p><img src="/../../../img/Archlinux-U%E7%9B%98-%E6%89%93%E9%80%A0%E9%9A%8F%E8%BA%AB%E7%B3%BB%E7%BB%9F%E7%9B%98/1.1.9.png" alt="1.1.9" title="1.1.9">  </p>
<h4 id="先同步数据包，不升级"><a href="#先同步数据包，不升级" class="headerlink" title="先同步数据包，不升级"></a>先同步数据包，不升级</h4><blockquote>
<p>注意，不升级！  </p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pacman -Syu</span><br></pre></td></tr></table></figure>
<p><img src="/../../../img/Archlinux-U%E7%9B%98-%E6%89%93%E9%80%A0%E9%9A%8F%E8%BA%AB%E7%B3%BB%E7%BB%9F%E7%9B%98/1.1.10.png" alt="1.1.10" title="1.1.10">  </p>
<h4 id="安装archlinux-keyring防止签名出现问题"><a href="#安装archlinux-keyring防止签名出现问题" class="headerlink" title="安装archlinux-keyring防止签名出现问题"></a>安装<code>archlinux-keyring</code>防止签名出现问题</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pacman -S archlinux-keyring</span><br></pre></td></tr></table></figure>
<p><img src="/../../../img/Archlinux-U%E7%9B%98-%E6%89%93%E9%80%A0%E9%9A%8F%E8%BA%AB%E7%B3%BB%E7%BB%9F%E7%9B%98/1.1.11.png" alt="1.1.11" title="1.1.11">  </p>
<h3 id="安装系统到U盘"><a href="#安装系统到U盘" class="headerlink" title="安装系统到U盘"></a>安装系统到U盘</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pacstrap /mnt base linux-lts linux-lts-headers linux-firmware base-devel</span><br></pre></td></tr></table></figure>
<blockquote>
<p>我安装的是lts内核，如果不需要lts内核，那就去掉<code>-lts</code>即可。  </p>
</blockquote>
<p><img src="/../../../img/Archlinux-U%E7%9B%98-%E6%89%93%E9%80%A0%E9%9A%8F%E8%BA%AB%E7%B3%BB%E7%BB%9F%E7%9B%98/1.1.12.png" alt="1.1.12" title="1.1.12"> </p>
<blockquote>
<p><del>btw，这里如果U盘IO不怎么地，那可能会巨慢….</del></p>
</blockquote>
<h4 id="写分区表"><a href="#写分区表" class="headerlink" title="写分区表"></a>写分区表</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">genfstab -U /mnt &gt;&gt; /mnt/etc/fstab</span><br><span class="line"><span class="built_in">cat</span> /mnt/etc/fstab</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这里<code>-U</code>是指使用uuid挂载硬盘，因为你使用U盘装系统所面临的问题可能有硬盘序号变化，因此我们使用uuid来避免这个问题。  </p>
</blockquote>
<p><img src="/../../../img/Archlinux-U%E7%9B%98-%E6%89%93%E9%80%A0%E9%9A%8F%E8%BA%AB%E7%B3%BB%E7%BB%9F%E7%9B%98/1.1.13.png" alt="1.1.13" title="1.1.13">   </p>
<h4 id="chroot"><a href="#chroot" class="headerlink" title="chroot"></a>chroot</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">arch-chroot /mnt</span><br></pre></td></tr></table></figure>
<p><img src="/../../../img/Archlinux-U%E7%9B%98-%E6%89%93%E9%80%A0%E9%9A%8F%E8%BA%AB%E7%B3%BB%E7%BB%9F%E7%9B%98/1.1.14.png" alt="1.1.14" title="1.1.14">  </p>
<h4 id="安装必要软件"><a href="#安装必要软件" class="headerlink" title="安装必要软件"></a>安装必要软件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pacman -S neovim iwd ttf-dejavu sudo bluez usbmuxd networkmanager dhcpcd wqy-zenhei ntfs-3g</span><br></pre></td></tr></table></figure>
<p><img src="/../../../img/Archlinux-U%E7%9B%98-%E6%89%93%E9%80%A0%E9%9A%8F%E8%BA%AB%E7%B3%BB%E7%BB%9F%E7%9B%98/1.1.15.png" alt="1.1.15" title="1.1.15">  </p>
<h4 id="软连接neovim到vim"><a href="#软连接neovim到vim" class="headerlink" title="软连接neovim到vim"></a>软连接neovim到vim</h4><blockquote>
<p>这何尝不是一种ntr(  </p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ln</span> -s /bin/nvim /bin/vim</span><br></pre></td></tr></table></figure>

<p><img src="/../../../img/Archlinux-U%E7%9B%98-%E6%89%93%E9%80%A0%E9%9A%8F%E8%BA%AB%E7%B3%BB%E7%BB%9F%E7%9B%98/1.1.16.png" alt="1.1.16" title="1.1.16">  </p>
<h4 id="同步时区"><a href="#同步时区" class="headerlink" title="同步时区"></a>同步时区</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ln</span> -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class="line">hwclock --systohc</span><br></pre></td></tr></table></figure>
<p><img src="/../../../img/Archlinux-U%E7%9B%98-%E6%89%93%E9%80%A0%E9%9A%8F%E8%BA%AB%E7%B3%BB%E7%BB%9F%E7%9B%98/1.1.17.png" alt="1.1.17" title="1.1.17">  </p>
<h4 id="语言上的设置"><a href="#语言上的设置" class="headerlink" title="语言上的设置"></a>语言上的设置</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/locale.gen</span><br></pre></td></tr></table></figure>
<p>这里取消掉<code>en_US.UTF-8</code> , <code>zh_CN.UTF-8</code> , <code>zh_TW.UTF-8</code> ，这几个地方的注释<br>也就是前面的<code>#</code>号  </p>
<p>然后生成语言文件：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">locale-gen</span><br></pre></td></tr></table></figure>
<p><img src="/../../../img/Archlinux-U%E7%9B%98-%E6%89%93%E9%80%A0%E9%9A%8F%E8%BA%AB%E7%B3%BB%E7%BB%9F%E7%9B%98/1.1.18.png" alt="1.1.18" title="1.1.18">  </p>
<h4 id="追加-当前系统语言-到系统文件"><a href="#追加-当前系统语言-到系统文件" class="headerlink" title="追加 当前系统语言 到系统文件"></a>追加 <code>当前系统语言</code> 到系统文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> LANG=en_US.UTF-8 &gt;&gt; /etc/locale.conf</span><br></pre></td></tr></table></figure>

<p><img src="/../../../img/Archlinux-U%E7%9B%98-%E6%89%93%E9%80%A0%E9%9A%8F%E8%BA%AB%E7%B3%BB%E7%BB%9F%E7%9B%98/1.1.19.png" alt="1.1.19" title="1.1.19">  </p>
<h4 id="设定root密码"><a href="#设定root密码" class="headerlink" title="设定root密码"></a>设定<code>root</code>密码</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">passwd</span><br></pre></td></tr></table></figure>
<p><img src="/../../../img/Archlinux-U%E7%9B%98-%E6%89%93%E9%80%A0%E9%9A%8F%E8%BA%AB%E7%B3%BB%E7%BB%9F%E7%9B%98/1.1.20.png" alt="1.1.20" title="1.1.20">  </p>
<h4 id="主机名"><a href="#主机名" class="headerlink" title="主机名"></a>主机名</h4><blockquote>
<p>设定成你自己喜欢的  </p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> livearch &gt;&gt; /etc/hostname</span><br></pre></td></tr></table></figure>
<p><img src="/../../../img/Archlinux-U%E7%9B%98-%E6%89%93%E9%80%A0%E9%9A%8F%E8%BA%AB%E7%B3%BB%E7%BB%9F%E7%9B%98/1.1.21.png" alt="1.1.21" title="1.1.21">  </p>
<h4 id="本地回环"><a href="#本地回环" class="headerlink" title="本地回环"></a>本地回环</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/hosts</span><br></pre></td></tr></table></figure>
<p>添加以下内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1 localhost</span><br><span class="line">::1 localhost</span><br><span class="line">127.0.1.1 livearch.localdomain livearch  <span class="comment">#跟着上一步改</span></span><br></pre></td></tr></table></figure>
<p><img src="/../../../img/Archlinux-U%E7%9B%98-%E6%89%93%E9%80%A0%E9%9A%8F%E8%BA%AB%E7%B3%BB%E7%BB%9F%E7%9B%98/1.1.22.png" alt="1.1.22" title="1.1.22">  </p>
<h4 id="安装引导"><a href="#安装引导" class="headerlink" title="安装引导"></a>安装引导</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pacman -S grub efibootmgr</span><br></pre></td></tr></table></figure>
<p><img src="/../../../img/Archlinux-U%E7%9B%98-%E6%89%93%E9%80%A0%E9%9A%8F%E8%BA%AB%E7%B3%BB%E7%BB%9F%E7%9B%98/1.1.23.png" alt="1.1.23" title="1.1.23">  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grub-install /dev/sda</span><br></pre></td></tr></table></figure>
<p><img src="/../../../img/Archlinux-U%E7%9B%98-%E6%89%93%E9%80%A0%E9%9A%8F%E8%BA%AB%E7%B3%BB%E7%BB%9F%E7%9B%98/1.1.24.png" alt="1.1.24" title="1.1.24">  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grub-mkconfig -o /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure>
<p><img src="/../../../img/Archlinux-U%E7%9B%98-%E6%89%93%E9%80%A0%E9%9A%8F%E8%BA%AB%E7%B3%BB%E7%BB%9F%E7%9B%98/1.1.25.png" alt="1.1.25" title="1.1.25">  </p>
<h4 id="hook微调"><a href="#hook微调" class="headerlink" title="hook微调"></a>hook微调</h4><p>将 <code>block</code> 和 <code>keyboard</code> 放置在 <code>autodetect</code> 之前</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/mkinitcpio.conf</span><br></pre></td></tr></table></figure>
<p><img src="/../../../img/Archlinux-U%E7%9B%98-%E6%89%93%E9%80%A0%E9%9A%8F%E8%BA%AB%E7%B3%BB%E7%BB%9F%E7%9B%98/1.1.27.png" alt="1.1.27" title="1.1.27">  </p>
<h4 id="退出，卸载，重启"><a href="#退出，卸载，重启" class="headerlink" title="退出，卸载，重启"></a>退出，卸载，重启</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exit</span></span><br><span class="line">umount -R /mnt</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure>
<p>到这一步差不多就完成了系统的安装，下面就要开始配置系统了。<br><img src="/../../../img/Archlinux-U%E7%9B%98-%E6%89%93%E9%80%A0%E9%9A%8F%E8%BA%AB%E7%B3%BB%E7%BB%9F%E7%9B%98/1.1.26.png" alt="1.1.26" title="1.1.26">  </p>
<p><del>Last Edit Time: 2023-01-10 0:51</del></p>
<h1 id="配置Arch-Linux"><a href="#配置Arch-Linux" class="headerlink" title="配置Arch Linux"></a>配置Arch Linux</h1><h2 id="网络基础服务："><a href="#网络基础服务：" class="headerlink" title="网络基础服务："></a>网络基础服务：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start iwd.service</span><br><span class="line">systemctl <span class="built_in">enable</span> iwd.service</span><br><span class="line">systemctl start systemd-resolved.service</span><br><span class="line">systemctl <span class="built_in">enable</span> systemd-resolved.service</span><br><span class="line">systemctl <span class="built_in">enable</span> bluetooth.service</span><br><span class="line">systemctl <span class="built_in">enable</span> NetworkManager</span><br><span class="line">systemctl <span class="built_in">enable</span> dhcpcd</span><br></pre></td></tr></table></figure>
<p><img src="/../../../img/Archlinux-U%E7%9B%98-%E6%89%93%E9%80%A0%E9%9A%8F%E8%BA%AB%E7%B3%BB%E7%BB%9F%E7%9B%98/2.1.1.png" alt="2.1.1" title="2.1.1">  </p>
<h3 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h3><p><code>iwd 设定</code>  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/iwd/main.conf</span><br></pre></td></tr></table></figure>

<p>写入如下内容  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[General]</span><br><span class="line">EnableNetworkConfiguration=<span class="literal">true</span></span><br><span class="line">NameResolvingService=systemd</span><br></pre></td></tr></table></figure>
<p><img src="/../../../img/Archlinux-U%E7%9B%98-%E6%89%93%E9%80%A0%E9%9A%8F%E8%BA%AB%E7%B3%BB%E7%BB%9F%E7%9B%98/2.1.2.png" alt="2.1.2" title="2.1.2">  </p>
<p><code>Network Manager设定</code>  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/NetworkManager/NetworkManager.conf</span><br></pre></td></tr></table></figure>
<p>写入如下内容  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[device]</span><br><span class="line">wifi.backend=iwd</span><br></pre></td></tr></table></figure>
<p><img src="/../../../img/Archlinux-U%E7%9B%98-%E6%89%93%E9%80%A0%E9%9A%8F%E8%BA%AB%E7%B3%BB%E7%BB%9F%E7%9B%98/2.1.3.png" alt="2.1.3" title="2.1.3">  </p>
<h3 id="重启以取得网络"><a href="#重启以取得网络" class="headerlink" title="重启以取得网络"></a>重启以取得网络</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure>
<h4 id="检查是否连接到网路"><a href="#检查是否连接到网路" class="headerlink" title="检查是否连接到网路"></a>检查是否连接到网路</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pacman -Syu</span><br></pre></td></tr></table></figure>
<p><img src="/../../../img/Archlinux-U%E7%9B%98-%E6%89%93%E9%80%A0%E9%9A%8F%E8%BA%AB%E7%B3%BB%E7%BB%9F%E7%9B%98/2.1.4.png" alt="2.1.4" title="2.1.4">  </p>
<p>这个命令只是为了检查有没有得到网络，如果报错，那就说明网络配置有问题，仔细检查一下。<br>如果没有问题，可以选择升级，也可以选择不升级，完全看自己。  </p>
<h2 id="安装CPU编码"><a href="#安装CPU编码" class="headerlink" title="安装CPU编码"></a>安装CPU编码</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pacman -S intel-ucode amd-ucode</span><br></pre></td></tr></table></figure>
<p><img src="/../../../img/Archlinux-U%E7%9B%98-%E6%89%93%E9%80%A0%E9%9A%8F%E8%BA%AB%E7%B3%BB%E7%BB%9F%E7%9B%98/2.1.5.png" alt="2.1.5" title="2.1.5">  </p>
<blockquote>
<p>一起装Intel和AMD的CPU编码，以确保Archlinux可以在不同下CPU成功的启动。  </p>
</blockquote>
<h2 id="安装显卡驱动"><a href="#安装显卡驱动" class="headerlink" title="安装显卡驱动"></a>安装显卡驱动</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pacman -S xf86-video-intel xf86-video-amdgpu mesa</span><br></pre></td></tr></table></figure>
<p><img src="/../../../img/Archlinux-U%E7%9B%98-%E6%89%93%E9%80%A0%E9%9A%8F%E8%BA%AB%E7%B3%BB%E7%BB%9F%E7%9B%98/2.1.6.png" alt="2.1.6" title="2.1.6">  </p>
<blockquote>
<p>这里不涉及nVidia显卡的驱动安装过程<br><code>xf86-video-intel</code>  Intel核芯显卡<br><code>xf86-video-amdgpu</code> AMD显卡<br><code>mesa</code> 是为了更好的兼容这两者(?)  </p>
</blockquote>
<h2 id="安装声卡驱动"><a href="#安装声卡驱动" class="headerlink" title="安装声卡驱动"></a>安装声卡驱动</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pacman -S pipewire alsa-utils pipewire-pulse pipewire-jack pipewire-alsa</span><br></pre></td></tr></table></figure>
<p><img src="/../../../img/Archlinux-U%E7%9B%98-%E6%89%93%E9%80%A0%E9%9A%8F%E8%BA%AB%E7%B3%BB%E7%BB%9F%E7%9B%98/2.1.7.png" alt="2.1.7" title="2.1.7">  </p>
<h2 id="增加普通用户"><a href="#增加普通用户" class="headerlink" title="增加普通用户"></a>增加普通用户</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">useradd -m -G wheel -s /bin/bash romi</span><br><span class="line">passwd romi</span><br></pre></td></tr></table></figure>
<p><img src="/../../../img/Archlinux-U%E7%9B%98-%E6%89%93%E9%80%A0%E9%9A%8F%E8%BA%AB%E7%B3%BB%E7%BB%9F%E7%9B%98/2.1.8.png" alt="2.1.8" title="2.1.8">  </p>
<p>用 <code>passwd romi</code> 设定用户密码，输入一个你想要的密码就可以。  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/sudoers</span><br></pre></td></tr></table></figure>
<p>修改sudoer以此让<code>romi</code>有使用sudo的权限。<br>取消 <code>%wheel ALL=(ALL:ALL) ALL</code> 这条语句的注释，也就是删去语句前的 <code>#</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## Uncomment to allow members of group wheel to execute any command</span></span><br><span class="line"><span class="comment"># %wheel ALL=(ALL:ALL) ALL</span></span><br></pre></td></tr></table></figure>
<p><img src="/../../../img/Archlinux-U%E7%9B%98-%E6%89%93%E9%80%A0%E9%9A%8F%E8%BA%AB%E7%B3%BB%E7%BB%9F%E7%9B%98/2.1.9.png" alt="2.1.9" title="2.1.9"> </p>
<h2 id="配置archlinuxcn源"><a href="#配置archlinuxcn源" class="headerlink" title="配置archlinuxcn源"></a>配置archlinuxcn源</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/pacman.conf</span><br></pre></td></tr></table></figure>
<p>在最后插入以下内容:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[archlinuxcn]</span><br><span class="line">Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/<span class="variable">$arch</span></span><br></pre></td></tr></table></figure>
<p><img src="/../../../img/Archlinux-U%E7%9B%98-%E6%89%93%E9%80%A0%E9%9A%8F%E8%BA%AB%E7%B3%BB%E7%BB%9F%E7%9B%98/fix_2.1.10.png" alt="2.1.10" title="2.1.10">  </p>
<p>然后安装 <code>archlinuxcn-keyring</code> 防止签名出现问题</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pacman -Sy</span><br><span class="line">pacman -S archlinuxcn-keyring</span><br></pre></td></tr></table></figure>
<p><img src="/../../../img/Archlinux-U%E7%9B%98-%E6%89%93%E9%80%A0%E9%9A%8F%E8%BA%AB%E7%B3%BB%E7%BB%9F%E7%9B%98/fix_2.1.11.png" alt="2.1.11" title="2.1.11">  </p>
<h2 id="安装yay"><a href="#安装yay" class="headerlink" title="安装yay"></a>安装yay</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pacman -S yay</span><br></pre></td></tr></table></figure>
<p><img src="/../../../img/Archlinux-U%E7%9B%98-%E6%89%93%E9%80%A0%E9%9A%8F%E8%BA%AB%E7%B3%BB%E7%BB%9F%E7%9B%98/fix_2.1.12.png" alt="2.1.12" title="2.1.12">  </p>
<h2 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h2><p>到这里，基本上所有系统的配置就完成了。下一次登陆系统就是一个完全可以用的Arch Linux系统了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure>

<h1 id="桌面配置"><a href="#桌面配置" class="headerlink" title="桌面配置"></a>桌面配置</h1><blockquote>
<p>为了方便，以下使用 <code>root</code> 用户完成</p>
</blockquote>
<p>如果你的U盘容量小，那就选择<code>i3wm</code><br>亲测<code>/</code>分区为10G时,安装<code>KDE</code>或者是<code>Gnome</code>会Kernel Panic<br>并且为了简约，我选择<code>i3wm</code></p>
<h2 id="首先安装桌面服务"><a href="#首先安装桌面服务" class="headerlink" title="首先安装桌面服务"></a>首先安装桌面服务</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pacman -S xorg</span><br></pre></td></tr></table></figure>
<p><img src="/../../../img/Archlinux-U%E7%9B%98-%E6%89%93%E9%80%A0%E9%9A%8F%E8%BA%AB%E7%B3%BB%E7%BB%9F%E7%9B%98/2.2.1.png" alt="2.2.1" title="2.2.1">  </p>
<h2 id="如果是安装KDE"><a href="#如果是安装KDE" class="headerlink" title="如果是安装KDE"></a>如果是安装<code>KDE</code></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pacman -S plasma sddm konsole dolphin kate ark</span><br></pre></td></tr></table></figure>
<blockquote>
<p>安装好后设定<code>sddm</code>的自启动</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> sddm</span><br></pre></td></tr></table></figure>
<h2 id="如果是安装Gnome"><a href="#如果是安装Gnome" class="headerlink" title="如果是安装Gnome"></a>如果是安装<code>Gnome</code></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pacman -S gnome</span><br></pre></td></tr></table></figure>
<blockquote>
<p>安装好后设定<code>gdm</code>的自启动</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> gdm</span><br></pre></td></tr></table></figure>
<h2 id="如果是安装i3wm"><a href="#如果是安装i3wm" class="headerlink" title="如果是安装i3wm"></a>如果是安装<code>i3wm</code></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pacman -S xorg-xinit xorg-server i3-gaps</span><br></pre></td></tr></table></figure>
<p><img src="/../../../img/Archlinux-U%E7%9B%98-%E6%89%93%E9%80%A0%E9%9A%8F%E8%BA%AB%E7%B3%BB%E7%BB%9F%E7%9B%98/2.2.2.png" alt="2.2.2" title="2.2.2">  </p>
<h3 id="配置i3wm"><a href="#配置i3wm" class="headerlink" title="配置i3wm"></a>配置<code>i3wm</code></h3><p>使用<code>Ctrl+Alt+F2</code>跳转到一个新的tty，登录普通用户，就是前面你新创建的用户，我这里是<code>romi</code>  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.xinitrc</span><br></pre></td></tr></table></figure>
<p><img src="/../../../img/Archlinux-U%E7%9B%98-%E6%89%93%E9%80%A0%E9%9A%8F%E8%BA%AB%E7%B3%BB%E7%BB%9F%E7%9B%98/2.2.3.png" alt="2.2.3" title="2.2.3">  </p>
<p>写入以下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> LANG=zh_CN.UTF-8</span><br><span class="line">xrdb -merge ~/.Xresources</span><br><span class="line"><span class="built_in">exec</span> i3</span><br></pre></td></tr></table></figure>
<p><img src="/../../../img/Archlinux-U%E7%9B%98-%E6%89%93%E9%80%A0%E9%9A%8F%E8%BA%AB%E7%B3%BB%E7%BB%9F%E7%9B%98/2.2.4.png" alt="2.2.4" title="2.2.4">  </p>
<p>然后</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.Xresources</span><br></pre></td></tr></table></figure>
<p><img src="/../../../img/Archlinux-U%E7%9B%98-%E6%89%93%E9%80%A0%E9%9A%8F%E8%BA%AB%E7%B3%BB%E7%BB%9F%E7%9B%98/2.2.6.png" alt="2.2.6" title="2.2.6">  </p>
<p>写入以下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Xft.dpi: 96</span><br></pre></td></tr></table></figure>
<p><img src="/../../../img/Archlinux-U%E7%9B%98-%E6%89%93%E9%80%A0%E9%9A%8F%E8%BA%AB%E7%B3%BB%E7%BB%9F%E7%9B%98/2.2.5.png" alt="2.2.5" title="2.2.5">  </p>
<blockquote>
<p>原文作者有给出dpi参考值：  </p>
<blockquote>
<p>里面的数字填 ( 放大倍数 ) * 96 就可以了，比如192就是放到200%，给个简单参考<br>15.5寸笔记本，1920x1080,填144<br>15.5寸笔记本，2560x1440,填192<br>如果觉得太大了，可以调小, 建议为25%的倍数  </p>
</blockquote>
</blockquote>
<h3 id="重启系统"><a href="#重启系统" class="headerlink" title="重启系统"></a>重启系统</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure>

<p><del>Last Edit Time: 2023-01-15 17:52</del></p>
<h1 id="i3wm后续配置"><a href="#i3wm后续配置" class="headerlink" title="i3wm后续配置"></a>i3wm后续配置</h1><h2 id="进入i3wm"><a href="#进入i3wm" class="headerlink" title="进入i3wm"></a>进入i3wm</h2><p>登录普通用户,进入i3wm  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">startx</span><br></pre></td></tr></table></figure>
<h3 id="i3配置文件"><a href="#i3配置文件" class="headerlink" title="i3配置文件"></a>i3配置文件</h3><p>回车,生成i3配置文件  </p>
<p><img src="/../../../img/Archlinux-U%E7%9B%98-%E6%89%93%E9%80%A0%E9%9A%8F%E8%BA%AB%E7%B3%BB%E7%BB%9F%E7%9B%98/3.1.1.png" alt="3.1.1" title="3.1.1">  </p>
<h3 id="mod键位"><a href="#mod键位" class="headerlink" title="mod键位"></a>mod键位</h3><p>注意,这里把<code>mod</code>键设置为<code>Win</code>  </p>
<p><img src="/../../../img/Archlinux-U%E7%9B%98-%E6%89%93%E9%80%A0%E9%9A%8F%E8%BA%AB%E7%B3%BB%E7%BB%9F%E7%9B%98/3.1.2.png" alt="3.1.2" title="3.1.2">  </p>
<h3 id="安装必要软件-1"><a href="#安装必要软件-1" class="headerlink" title="安装必要软件"></a>安装必要软件</h3><p>使用<code>Ctrl+Alt+F2</code>跳转到一个新的tty，登录普通用户，就是前面你新创建的用户，我这里是<code>romi</code>  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yay -S compton polybar rofi feh mate-utils konsole</span><br></pre></td></tr></table></figure>
<blockquote>
<p>第一次使用sudo会提示用户输入密码,正常输入即可  </p>
</blockquote>
<p><img src="/../../../img/Archlinux-U%E7%9B%98-%E6%89%93%E9%80%A0%E9%9A%8F%E8%BA%AB%E7%B3%BB%E7%BB%9F%E7%9B%98/3.1.3.png" alt="3.1.3" title="3.1.3">  </p>
<h3 id="克隆配置文件到本地"><a href="#克隆配置文件到本地" class="headerlink" title="克隆配置文件到本地"></a><del>克隆配置文件到本地</del></h3><p>(如果区域内github被墙,那么就看跳过这一部分)  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/Romi-Brooks/i3wm_conf.git</span><br></pre></td></tr></table></figure>
<p>这些文件的用处:  </p>
<blockquote>
<p><code>config</code> i3wm配置文件<br><code>config.ini</code> polybar配置文件<br><code>launch.sh</code> 用于加载 polybar<br><code>3177970.jpg</code> 背景图片</p>
</blockquote>
<p>他们分别应该存放到:</p>
<blockquote>
<p><code>3177970.jpg</code> -&gt; <code>~/Pictures/Background.jpg</code><br>这里的 <code>~/Pictures/</code>文件夹需要自行创建,背景文件你可以选一个你喜欢的,不一定要用我这个  </p>
<blockquote>
<p>这里你需要自己改一下文件名:<br>(很简单,只要最终文件目录是 <code>~/Pictures/Background.jpg</code>即可,方法有很多种)  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> 3177970.jpg Background.jpg  </span><br></pre></td></tr></table></figure>

</blockquote>
<p><code>config</code> -&gt; <code>~/.config/i3/config</code><br><code>config.ini</code> -&gt; <code>~/.config/polybar/config.ini</code><br><code>launch.sh</code> -&gt; <code>~/.config/polybar/launch.sh</code><br>其中 <code>~/.config/polybar</code>文件夹可能不存在,创建一个即可  </p>
</blockquote>
<p>最后给<code>launch.sh</code>文件可执行权限:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x launch.sh</span><br></pre></td></tr></table></figure>

<p>重启,使用<code>普通用户</code>登录,用startx进入i3wm即可  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">startx</span><br></pre></td></tr></table></figure>
<h3 id="如果不能克隆配置文件-那么直接写配置文件"><a href="#如果不能克隆配置文件-那么直接写配置文件" class="headerlink" title="如果不能克隆配置文件,那么直接写配置文件"></a>如果不能克隆配置文件,那么直接写配置文件</h3><p>这一步要写很多的东西,如果觉得麻烦直接用ssh登录,复制粘贴</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yay -S openssh</span><br><span class="line">sudo systemctl start sshd.service</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> sshd.service</span><br></pre></td></tr></table></figure>

<p>得到ip地址</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ip addr</span><br></pre></td></tr></table></figure>

<p>然后使用一台设备连接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh username@hostip</span><br></pre></td></tr></table></figure>
<blockquote>
<p>初次连接,输入一次yes  </p>
</blockquote>
<h4 id="背景图片"><a href="#背景图片" class="headerlink" title="背景图片"></a>背景图片</h4><p>随便去找一个图片,存放在 <code>~/Pictures/Background.jpg</code><br>比如</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> ~/Pictures/</span><br><span class="line">wget https://i.328888.xyz/2023/01/17/HZUfC.jpeg</span><br><span class="line"><span class="built_in">mv</span> HZUfC.jpeg ~/Pictures/Background.jpg</span><br></pre></td></tr></table></figure>
<blockquote>
<p>来自<a href="https://wallpapercave.com/">Wallpaper Cave</a>,图床的连接可能失效.  </p>
</blockquote>
<h4 id="编辑i3的config文件"><a href="#编辑i3的config文件" class="headerlink" title="编辑i3的config文件"></a>编辑i3的<code>config</code>文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.config/i3/config</span><br></pre></td></tr></table></figure>
<p>在<code>set $mod Mod4</code> 这条语句下面插入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">new_window none</span><br><span class="line">new_float normal</span><br><span class="line">hide_edge_borders both</span><br><span class="line">gaps inner 8</span><br><span class="line">gaps outer 6</span><br><span class="line">bindsym <span class="variable">$mod</span>+p <span class="built_in">exec</span> mate-screenshot -i</span><br><span class="line"><span class="built_in">exec</span> --no-startup-id feh --bg-fill ~/Pictures/Background.jpg</span><br><span class="line"><span class="built_in">exec</span> --no-startup-id compton -b</span><br><span class="line"><span class="built_in">exec</span> --no-startup-id ~/.config/polybar/launch.sh</span><br></pre></td></tr></table></figure>

<p>在  </p>
<blockquote>
<p><code># start dmenu (a program launcher)</code>  </p>
</blockquote>
<p>(写完上面的配置内容,那么这条语句大约在58行)<br>这条语句下面找到  </p>
<blockquote>
<p><code>bindsym $mod+d exec --no-startup-id dmenu_run</code>  </p>
</blockquote>
<p>将其注释,然后添加  </p>
<blockquote>
<p><code>bindsym $mod+d exec --no-startup-id rofi -show drun</code>  </p>
</blockquote>
<p>到这条语句下</p>
<p>在最后一行,将</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bar &#123;</span><br><span class="line">        status_command i3status</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>全部注释 (即在开头加上#)</p>
<h4 id="编辑-polybar-的config-ini文件"><a href="#编辑-polybar-的config-ini文件" class="headerlink" title="编辑 polybar 的config.ini文件"></a>编辑 polybar 的<code>config.ini</code>文件</h4><p>首先创建polybar的配置目录,然后把官方提供的一个样式放在里头</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> ~/.config/polybar</span><br><span class="line"><span class="built_in">cp</span> /usr/share/doc/polybar/examples/config.ini ~/.config/polybar/config.ini</span><br></pre></td></tr></table></figure>

<p>修改配色样式(实际上就改了几行),这个样式就在第一位,polybar的注释符号是<code>;</code><br>观察源文件,加以修改就行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[colors]</span><br><span class="line">;background = <span class="comment">#282A2E</span></span><br><span class="line">;background-alt = <span class="comment">#373B41</span></span><br><span class="line">background = <span class="comment">#b0222222</span></span><br><span class="line">background-alt = <span class="comment">#444</span></span><br><span class="line">;foreground = <span class="comment">#C5C8C6</span></span><br><span class="line">foreground = <span class="comment">#dfdfdf</span></span><br><span class="line">foreground-alt = <span class="comment">#555</span></span><br><span class="line">primary = <span class="comment">#ffb52a</span></span><br><span class="line">secondary = <span class="comment">#e60053</span></span><br><span class="line">alert = <span class="comment">#bd2c40</span></span><br><span class="line">disabled = <span class="comment">#707880</span></span><br></pre></td></tr></table></figure>

<h4 id="写launch-sh以启动polybar"><a href="#写launch-sh以启动polybar" class="headerlink" title="写launch.sh以启动polybar"></a>写<code>launch.sh</code>以启动polybar</h4><p>创建脚本文件  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.config/polybar/launch.sh</span><br></pre></td></tr></table></figure>
<p>插入以下内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">killall -q polybar</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> pgrep -u <span class="variable">$UID</span> -x polybar &gt;/dev/null; <span class="keyword">do</span> <span class="built_in">sleep</span> 1; <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">polybar example</span><br></pre></td></tr></table></figure>
<p>给予权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x ~/.config/polybar/launch.sh</span><br></pre></td></tr></table></figure>

<h4 id="安装一些常用工具"><a href="#安装一些常用工具" class="headerlink" title="安装一些常用工具"></a>安装一些常用工具</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yay -S mate-extra</span><br></pre></td></tr></table></figure>
<p><del>不多说,直接干mate-extra</del></p>
<p>到这里,i3wm的配置基本就结束了  </p>
<h3 id="重启-1"><a href="#重启-1" class="headerlink" title="重启"></a>重启</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure>
<p>当需要启动i3wm的时候,只需要</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">startx</span><br></pre></td></tr></table></figure>

<p><del>Last Edit Time: 2023-01-17 17:46</del>  </p>
<h1 id="ohmyzsh-美化"><a href="#ohmyzsh-美化" class="headerlink" title="ohmyzsh 美化"></a>ohmyzsh 美化</h1><h1 id="未完"><a href="#未完" class="headerlink" title="未完"></a>未完</h1><h2 id="在最后的最后，感恩。"><a href="#在最后的最后，感恩。" class="headerlink" title="在最后的最后，感恩。"></a><center>在最后的最后，感恩。</center></h2>   <p align="right">Romi Brooks♥</p>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Archlinux</tag>
        <tag>Installation</tag>
        <tag>i3wm</tag>
      </tags>
  </entry>
  <entry>
    <title>利用JACK , 玩转 Reaper For Linux</title>
    <url>/2022/10/28/%E5%88%A9%E7%94%A8JACK%20,%20%E7%8E%A9%E8%BD%AC%20Reaper%20For%20Linux/</url>
    <content><![CDATA[<p><img src="/../../../img/JACK-Reaper-For-Linux/Cover.png" alt="封面" title="Cover"></p>
<audio id="audio" controls="" preload="none">
    <source id="mp3" src="../../../../music/JACK-Reaper-For-Linux/GoldClassAudio-SamplePack.mp3">
</audio>  

<p>您可以点击上方的“播放按钮”，来听上图所截得的几首EDM Progressive House (注意音量)<br><em>（音乐来自：Gold Class Audio出品的Sample Pack：Main Progressive House中Full Track Preview）</em>  </p>
<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>笔者在这里用的 Linux 发行版是 <code>Arch Linux</code> , 并且使用 <a href="https://www.reaper.fm/">Reaper 官网</a> 所提供的 <code>Linux x86_64</code> 版本。  </p>
<p>不同的系统有不同的操作方式,但是大体逻辑是一样的。这篇Post的目的在于成功的利用Jack在Linux上运行daw。并且由于Reaper在linux有提供Build包,所以我们应当首选Reaper来作为我们要使用的Daw，这样会节省很多时间。  </p>
<span id="more"></span>
<p><del>那么现在，我们开始⑧！</del></p>
<h1 id="1-安装，启动并设定JACK2"><a href="#1-安装，启动并设定JACK2" class="headerlink" title="1.安装，启动并设定JACK2"></a>1.安装，启动并设定<code>JACK2</code></h1><blockquote>
<p>参考： <a href="https://anclark.github.io/2020/12/08/Linux_Audio_Production/Make_Your_ArchLinux_An_Audio_Workstation_01/">把Arch Linux打造成音乐工作站</a>  </p>
</blockquote>
<p><code>JACK</code> 分为两个版本，分别是：</p>
<ul>
<li><code>JACK1</code> 由C编写，这是最初的版本</li>
<li><code>JACK2</code> 由C++重写</li>
</ul>
<p><code>JACK2</code>相比<code>JACK1</code>来说，要方便配置很多，它不需要配置多的用户权限就可以使用，并且可以把<code>PulseAudio</code>,<code>ALSA</code> 桥接到 <code>JACK2</code> 。并且如果你之前在Windows体验过被ASIO4ALL所独占声卡的悲痛，那么<code>JACK1</code>也是如此。<br>所以我们果断选择<code>JACK2</code>。  </p>
<h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h2><h3 id="打开您的Terminal，首先安装JACK2主程序："><a href="#打开您的Terminal，首先安装JACK2主程序：" class="headerlink" title="打开您的Terminal，首先安装JACK2主程序："></a>打开您的Terminal，首先安装<code>JACK2</code>主程序：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo pacman -S jack2</span><br></pre></td></tr></table></figure>
<h3 id="根据需求安装您需要桥接到JACK2的接口："><a href="#根据需求安装您需要桥接到JACK2的接口：" class="headerlink" title="根据需求安装您需要桥接到JACK2的接口："></a>根据需求安装您需要桥接到<code>JACK2</code>的接口：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo pacman -S pulseaudio-jack <span class="comment">#这是PulseAudio -&gt; JACK2</span></span><br><span class="line">$ sudo pacman -S zita-ajbridge   <span class="comment">#这是ALSA -&gt; JACK2</span></span><br></pre></td></tr></table></figure>
<h3 id="安装Cadence来托管JACK2："><a href="#安装Cadence来托管JACK2：" class="headerlink" title="安装Cadence来托管JACK2："></a>安装<code>Cadence</code>来托管<code>JACK2</code>：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo pacman -S cadence</span><br></pre></td></tr></table></figure>
<h3 id="添加您到audio用户组："><a href="#添加您到audio用户组：" class="headerlink" title="添加您到audio用户组："></a>添加您到<code>audio</code>用户组：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo usermod --append -G audio username  <span class="comment">#其中username是您的用户名</span></span><br></pre></td></tr></table></figure>
<h3 id="Final-Step："><a href="#Final-Step：" class="headerlink" title="Final Step："></a>Final Step：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ reboot</span><br></pre></td></tr></table></figure>

<h2 id="2-启动并设定JACK2"><a href="#2-启动并设定JACK2" class="headerlink" title="2.启动并设定JACK2"></a>2.启动并设定<code>JACK2</code></h2><h3 id="启动-Cadence，通常来说，它安装到了您的桌面，只需要搜索就可以启动它。"><a href="#启动-Cadence，通常来说，它安装到了您的桌面，只需要搜索就可以启动它。" class="headerlink" title="启动 Cadence，通常来说，它安装到了您的桌面，只需要搜索就可以启动它。"></a>启动 <code>Cadence</code>，通常来说，它安装到了您的桌面，只需要搜索就可以启动它。</h3><p><img src="/../../../img/JACK-Reaper-For-Linux/1.png" alt="1.2.1" title="1.2.1"></br></p>
<h3 id="点击-JACK-Bridges-中的-Bridge-Type-来设定桥接-（这里根据您所安装的接口来选择，我选择了ALSA-gt-JACK）："><a href="#点击-JACK-Bridges-中的-Bridge-Type-来设定桥接-（这里根据您所安装的接口来选择，我选择了ALSA-gt-JACK）：" class="headerlink" title="点击 JACK Bridges 中的 Bridge Type 来设定桥接 （这里根据您所安装的接口来选择，我选择了ALSA -&gt; JACK）："></a>点击 <code>JACK Bridges</code> 中的 <code>Bridge Type</code> 来设定桥接 （这里根据您所安装的接口来选择，我选择了<code>ALSA -&gt; JACK</code>）：</h3><p><img src="/../../../img/JACK-Reaper-For-Linux/2.png" alt="1.2.2" title="1.2.2"></br></p>
<h3 id="点击-JACK-Status-中的-Configure-来配置桥接-（您设定的桥接是什么接口就选择什么Driver）："><a href="#点击-JACK-Status-中的-Configure-来配置桥接-（您设定的桥接是什么接口就选择什么Driver）：" class="headerlink" title="点击 JACK Status 中的 Configure 来配置桥接 （您设定的桥接是什么接口就选择什么Driver）："></a>点击 <code>JACK Status</code> 中的 <code>Configure</code> 来配置桥接 （您设定的桥接是什么接口就选择什么<code>Driver</code>）：</h3><p><img src="/../../../img/JACK-Reaper-For-Linux/3.png" alt="1.2.3" title="1.2.3"></br></p>
<h3 id="点击OK-退回到主界面之后点击Start即可启动JACK2。（您也可以点击Auto-start-JACK-or-LADISH-at-login来登陆自动启动JACK2）："><a href="#点击OK-退回到主界面之后点击Start即可启动JACK2。（您也可以点击Auto-start-JACK-or-LADISH-at-login来登陆自动启动JACK2）：" class="headerlink" title="点击OK 退回到主界面之后点击Start即可启动JACK2。（您也可以点击Auto-start JACK or LADISH at login来登陆自动启动JACK2）："></a>点击<code>OK</code> 退回到主界面之后点击<code>Start</code>即可启动<code>JACK2</code>。（您也可以点击<code>Auto-start JACK or LADISH at login</code>来登陆自动启动<code>JACK2</code>）：</h3><p><img src="/../../../img/JACK-Reaper-For-Linux/4.png" alt="1.2.4" title="1.2.4"></br><br>看到<code>JACK Status</code> 中的 <code>Server Status</code> 是<code>Start</code>就说明 <code>Cadence</code>已经托管了<code>JACK2</code>并且<code>JACK2</code>也桥接了我们的音频设备。（后续您就可以为<code>Cadence</code>添加自启动项，这样一开机音频驱动就会自动桥接到JACK2啦）</p>
<h1 id="2-安装，启动并配置Reaper"><a href="#2-安装，启动并配置Reaper" class="headerlink" title="2.安装，启动并配置Reaper"></a>2.安装，启动并配置<code>Reaper</code></h1><h2 id="1-安装-1"><a href="#1-安装-1" class="headerlink" title="1.安装"></a>1.安装</h2><h3 id="首先去-Reaper的官网-然后点击DOWNLOAD-REAPER-来下载Reaper："><a href="#首先去-Reaper的官网-然后点击DOWNLOAD-REAPER-来下载Reaper：" class="headerlink" title="首先去 Reaper的官网 然后点击DOWNLOAD REAPER 来下载Reaper："></a>首先去 <a href="https://www.reaper.fm/">Reaper的官网</a> 然后点击<code>DOWNLOAD REAPER</code> 来下载<code>Reaper</code>：</h3><blockquote>
<p>此处根据您的系统架构选择版本（<code>一般选择Linux x86_64</code>）：  </p>
</blockquote>
<h3 id="解压-进入主程序目录："><a href="#解压-进入主程序目录：" class="headerlink" title="解压,进入主程序目录："></a>解压,进入主程序目录：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tar -xvf reaper669_linux_x86_64.tar.xz &amp;&amp; <span class="built_in">rm</span> reaper669_linux_x86_64.tar.xz &amp;&amp; <span class="built_in">cd</span> reaper669_linux_x86_64  <span class="comment">#注意，这里669根据版本号来自行更改哦</span></span><br></pre></td></tr></table></figure>
<h3 id="在当前目录执行安装脚本："><a href="#在当前目录执行安装脚本：" class="headerlink" title="在当前目录执行安装脚本："></a>在当前目录执行安装脚本：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">chmod</span> +x install-reaper.sh</span><br><span class="line">$ ./install-reaper.sh  </span><br></pre></td></tr></table></figure>
<p>输入<code>I</code>，之后<code>Reaper</code>会被安装到<code>～/opt/REAPER/</code>目录下</p>
<h3 id="软连接到-usr-bin"><a href="#软连接到-usr-bin" class="headerlink" title="软连接到/usr/bin"></a>软连接到<code>/usr/bin</code></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo <span class="built_in">ln</span> -s /home/username/opt/REAPER/reaper /usr/bin/reaper  <span class="comment">#其中username是您的用户名</span></span><br></pre></td></tr></table></figure>
<h3 id="写Desktop-File以便于从桌面启动："><a href="#写Desktop-File以便于从桌面启动：" class="headerlink" title="写Desktop File以便于从桌面启动："></a>写<code>Desktop File</code>以便于从桌面启动：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo vim /usr/share/applications/reaper.desktop</span><br></pre></td></tr></table></figure>
<p>按<code>I</code>进入插入模式，输入：</p>
<pre><code class="bash">[Desktop Entry]  
Name=Reaper  
Comment=A Complete Digital Audio Production Application For Linux  
Exec=/usr/bin/reaper  
Icon=/home/username/opt/Reaper/reaper.png  #您需要去下载一个reaper的Icon移动到这里，其中username是您的用户名  
Terminal=false  
Type=Application  
Categories=Music;
</code></pre>
<h3 id="现在您搜索Reaper应该就有匹配项了（如果没有，您可能需要等一小会儿）"><a href="#现在您搜索Reaper应该就有匹配项了（如果没有，您可能需要等一小会儿）" class="headerlink" title="现在您搜索Reaper应该就有匹配项了（如果没有，您可能需要等一小会儿）"></a>现在您搜索<code>Reaper</code>应该就有匹配项了（如果没有，您可能需要等一小会儿）</h3><h2 id="2-启动并配置Reaper"><a href="#2-启动并配置Reaper" class="headerlink" title="2.启动并配置Reaper"></a>2.启动并配置<code>Reaper</code></h2><h3 id="打开Reaper，无论您是从命令行启动，还是桌面启动"><a href="#打开Reaper，无论您是从命令行启动，还是桌面启动" class="headerlink" title="打开Reaper，无论您是从命令行启动，还是桌面启动"></a>打开<code>Reaper</code>，无论您是从命令行启动，还是桌面启动</h3><h3 id="等待几秒的许可证要求窗口，然后点击Still-Evaluating"><a href="#等待几秒的许可证要求窗口，然后点击Still-Evaluating" class="headerlink" title="等待几秒的许可证要求窗口，然后点击Still Evaluating"></a>等待几秒的许可证要求窗口，然后点击<code>Still Evaluating</code></h3><p><img src="/../../../img/JACK-Reaper-For-Linux/5.png" alt="2.2.1" title="2.2.1"></br></p>
<blockquote>
<p><code>Reaper</code>是一款轻量强大的DAW，如果您觉得它还不错，并且您已经在Windows使用Reaper许久，却还没有注册license的话，请支持制作商<code>Cockos</code>，买一份<code>Reaper</code>的License吧！</p>
</blockquote>
<h3 id="点击Options-gt-Preferences-gt-Audio-gt-Device，选择Audio-system-gt-JACK，然后Apply即可。"><a href="#点击Options-gt-Preferences-gt-Audio-gt-Device，选择Audio-system-gt-JACK，然后Apply即可。" class="headerlink" title="点击Options-&gt;Preferences-&gt;Audio-&gt;Device，选择Audio system-&gt;JACK，然后Apply即可。"></a>点击<code>Options-&gt;Preferences-&gt;Audio-&gt;Device</code>，选择<code>Audio system</code>-&gt;<code>JACK</code>，然后<code>Apply</code>即可。</h3><p><img src="/../../../img/JACK-Reaper-For-Linux/6.png" alt="2.2.2" title="2.2.3"></br></p>
<h3 id="恭喜您，配置完成了！现在开始Reaper已经以JACK2为音频驱动，为您工作了！"><a href="#恭喜您，配置完成了！现在开始Reaper已经以JACK2为音频驱动，为您工作了！" class="headerlink" title="恭喜您，配置完成了！现在开始Reaper已经以JACK2为音频驱动，为您工作了！"></a>恭喜您，配置完成了！现在开始<code>Reaper</code>已经以<code>JACK2</code>为音频驱动，为您工作了！</h3><h1 id="Wait…-Somethings-is-Wrong…"><a href="#Wait…-Somethings-is-Wrong…" class="headerlink" title="Wait…. Somethings is Wrong…"></a>Wait…. Somethings is Wrong…</h1><p>你有没有发现，我在封面展示的那张图中，显示了中文，但是当您兴冲冲的开始自己的Linux音乐之路的时候，发现您的输入中文或者是其它字符时却出现了方块！</p>
<h2 id="这个问题的解决方法来自Cockos-REAPER-中文群的大佬Tee"><a href="#这个问题的解决方法来自Cockos-REAPER-中文群的大佬Tee" class="headerlink" title="这个问题的解决方法来自Cockos REAPER 中文群的大佬Tee"></a>这个问题的解决方法来自<code>Cockos REAPER 中文群</code>的大佬<a href="https://lado.me/">Tee</a></h2><blockquote>
<p>原帖地址是这里：<a href="https://zhuanlan.zhihu.com/p/364000143">如何在Linux REAPER里显示中文</a></p>
</blockquote>
<pre><code class="bash">sudo vim /etc/fonts/fonts.conf
</code></pre>
<p>按下<code>I</code>，插入以下内容：  </p>
<pre><code class="bash">    &lt;!-- REAPER fonts patch --&gt;
    &lt;match target=&quot;pattern&quot;&gt;
      &lt;test name=&quot;prgname&quot;&gt;
       &lt;string&gt;reaper&lt;/string&gt;
    &lt;/test&gt;
      &lt;edit name=&quot;family&quot; mode=&quot;assign&quot;&gt;
       &lt;string&gt;Noto Sans CJK SC&lt;/string&gt;
      &lt;/edit&gt;
    &lt;/match&gt;  
</code></pre>
<p>注意插入的位置，位于 <strong>fontconfig标签之间。</strong> 这里涉及系统文件，请务必小心。</p>
<h3 id="现在输入中文，它的显示就会正常了！"><a href="#现在输入中文，它的显示就会正常了！" class="headerlink" title="现在输入中文，它的显示就会正常了！"></a>现在输入中文，它的显示就会正常了！</h3><h2 id="在最后的最后，感恩。"><a href="#在最后的最后，感恩。" class="headerlink" title="在最后的最后，感恩。"></a><center>在最后的最后，感恩。</center></h2>   <p align="right">Romi Brooks♥</p>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Reaper</tag>
      </tags>
  </entry>
  <entry>
    <title>FL Studio Tips: 通过控制LFO Speed，使你的音乐更有律动</title>
    <url>/2022/04/27/FL-Studio-Tips-%E5%88%A9%E7%94%A8LFO-LFO-Speed%E5%81%9A%E5%87%BA%E5%8A%A0%E8%8A%B1%E6%95%88%E6%9E%9C/</url>
    <content><![CDATA[<p><img src="/../../../img/FL-Studio-Tips-LFO-Speed/cover.png" alt="封面" title="Cover"></p>
<audio id="audio" controls="" preload="none">
    <source id="mp3" src="../../../../music/FLTips/FutureBass.mp3">
</audio>

<p>在了解这之前，您可以点击上方的“播放按钮”，来听一首歌。</p>
<p><em>（音乐来自：FL Studio中DemoSong内Asher Postman-Future Bass）</em></p>
<p> 这首歌里用到了此文章所用到的技巧。</p>
<span id="more"></span>
<p><del>那么现在，我们开始⑧！</del></p>
<h1 id="首先，您听到了吗？"><a href="#首先，您听到了吗？" class="headerlink" title="首先，您听到了吗？"></a>首先，您听到了吗？</h1><h2 id="在这个小节，我们可以明显的听到LFO频率交变所带来的特殊感觉"><a href="#在这个小节，我们可以明显的听到LFO频率交变所带来的特殊感觉" class="headerlink" title="在这个小节，我们可以明显的听到LFO频率交变所带来的特殊感觉:"></a>在这个小节，我们可以明显的听到LFO频率交变所带来的特殊感觉:</h2><audio id="audio" controls="" preload="none">
    <source id="mp3" src="../../../../music/FLTips/FutureBassLFO2.mp3">
</audio>

<p> <del>什么？您没有听清？那我们去掉所有无关的sfx，和drums:</del></p>
<audio id="audio" controls="" preload="none">
    <source id="mp3" src="../../../../music/FLTips/FutureBassNDLFO2.mp3">
</audio>

<h2 id="其实还有一次，是在这里"><a href="#其实还有一次，是在这里" class="headerlink" title="其实还有一次，是在这里:"></a>其实还有一次，是在这里:</h2><audio id="audio" controls="" preload="none">
    <source id="mp3" src="../../../../music/FLTips/FutureBassLFO1.mp3">
</audio>

<p><del>什么？您还是没有听清？那我们去掉所有无关的sfx，和drums:</del>  </p>
<audio id="audio" controls="" preload="none">
    <source id="mp3" src="../../../../music/FLTips/FutureBassNDLFO1.mp3">
</audio>

<h1 id="这下，您应该能大致的理解我想表达什么了。"><a href="#这下，您应该能大致的理解我想表达什么了。" class="headerlink" title="这下，您应该能大致的理解我想表达什么了。"></a>这下，您应该能大致的理解我想表达什么了。</h1><h2 id="这个效果可以用来干啥？"><a href="#这个效果可以用来干啥？" class="headerlink" title="这个效果可以用来干啥？"></a>这个效果可以用来干啥？</h2><p>  可以用来当做SFX的加花，可以用来结束一个乐句进行，也可以当做一种特殊的“震颤”效果，做出压抑感。与其他任何您喜欢的方式来对你的音乐美化。</p>
<h2 id="你是怎么发现的？"><a href="#你是怎么发现的？" class="headerlink" title="你是怎么发现的？"></a>你是怎么发现的？</h2><p>  来自 Asher Postman-Future Bass，我的fb启蒙制作者，包括其中的一种SideChain方式也是从这个工程学的。</p>
<blockquote>
<p>Title: Future Bass (Stock Plugins Only) </br><br>Author: <a href="https://soundcloud.com/asher-postman">Asher Postman</a></br><br>Copyright © 2018 Asher Postman. </br></p>
</blockquote>
<h2 id="如何实现？"><a href="#如何实现？" class="headerlink" title="如何实现？"></a>如何实现？</h2><p>  来看两张图：</br><br><img src="/../../../img/FL-Studio-Tips-LFO-Speed/1.gif" alt="1" title="1"></br><br><img src="/../../../img/FL-Studio-Tips-LFO-Speed/2.gif" alt="2" title="2"></br></p>
<p>  不知道你有没有看到他们的共性，没错：<strong>其中的一个AMC（Automation Clips）均为”LFO Speed”，伴随着LFO Speed的降低，它们所控制的LFO频率也随之降低。</strong></p>
<p>  上面说，“他们所控制的LFO频率”，那么我们首先得创作出一个LFO的AMC，这里FL Studio给大家了一种方法：</p>
<pre><code>  1.在您要实施此效果的对应旋钮上新建一个 AMC (Create automation clip)
  2.在 View Playlist 找到它，单击它名字旁边的AMC图标
  3.点击Channel Settings
    （1.一个很明显的 LFO 选项，打开它，之后设计您想要的波形（我们先不管speed，您可以设定其他几个值）
    （2.右键SPEED旋钮，新建一个AMC
    （3.现在您得到了两个AMC，这正是我们想要的结果，接下来就要靠您的听感了
  4.在您听感的基础上，调节LFO speed AMC使其满足您的要求
  5.Good Job，您已经做好了一件看起来很困难的东西，但其实这并不难，不是吗？
</code></pre>
<h1 id="原理？"><a href="#原理？" class="headerlink" title="原理？"></a>原理？</h1><p>  原理就是，LFO Speed AMC 控制LFO的频率，影响到LFO所控制的旋钮  </p>
<h1 id="实践-amp-展示"><a href="#实践-amp-展示" class="headerlink" title="实践&amp;展示"></a>实践&amp;展示</h1><h2 id="一，做FutureBass的WobbleChords（无LFO-Speed-AMC，当然您也可以加）："><a href="#一，做FutureBass的WobbleChords（无LFO-Speed-AMC，当然您也可以加）：" class="headerlink" title="一，做FutureBass的WobbleChords（无LFO Speed AMC，当然您也可以加）："></a>一，做FutureBass的WobbleChords（无LFO Speed AMC，当然您也可以加）：</h2><p><img src="/../../../img/FL-Studio-Tips-LFO-Speed/1.png" alt="1" title="1"></br></p>
<h2 id="二，做Hippop的MelodySFX："><a href="#二，做Hippop的MelodySFX：" class="headerlink" title="二，做Hippop的MelodySFX："></a>二，做Hippop的MelodySFX：</h2><p><img src="/../../../img/FL-Studio-Tips-LFO-Speed/2.png" alt="2" title="2"></br> </p>
<blockquote>
<p>Tips：在这里，您可以用Wave，Pulse等AMC Point Mode，右键AMC节点即可。<br></br>  </p>
</blockquote>
<h2 id="三，And-so-on……"><a href="#三，And-so-on……" class="headerlink" title="三，And so on……"></a>三，And so on……</h2></br>


<h1 id="最后，一首Melodic-Dubstep给您，感谢您阅读此文章，这便是对我最大的认可了。"><a href="#最后，一首Melodic-Dubstep给您，感谢您阅读此文章，这便是对我最大的认可了。" class="headerlink" title="最后，一首Melodic Dubstep给您，感谢您阅读此文章，这便是对我最大的认可了。"></a>最后，一首Melodic Dubstep给您，感谢您阅读此文章，这便是对我最大的认可了。</h1><blockquote>
<p>这里用到了<a href="https://www.youtube.com/user/OfficialVirtualRiot">Virtual Riot</a>  的采样包，堆叠而成。我只是做了混音以及编排（哦对，还有一个自己的Long BuildUp，笑）。 </br></p>
</blockquote>
<p><img src="/../../../img/FL-Studio-Tips-LFO-Speed/3.png" alt="3" title="3"></br></p>
<audio id="audio" controls="" preload="none">
    <source id="mp3" src="../../../../music/FLTips/Md.mp3">
</audio>

</br>

<h2 id="在最后的最后，感恩。"><a href="#在最后的最后，感恩。" class="headerlink" title="在最后的最后，感恩。"></a><center>在最后的最后，感恩。</center></h2>   <p align="right">Romi Brooks♥</p>
]]></content>
      <categories>
        <category>Music</category>
      </categories>
      <tags>
        <tag>FL-Tips</tag>
      </tags>
  </entry>
</search>
